// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`attributes class and t-att-class should combine together 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 2, tag: \\"div\\", children: [], attrs: {class:\\"hello\\"}, key: 1, class: this.toClassObj(ctx['value'])};
}"
`;

exports[`attributes dynamic attribute falsy variable  1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    let _1 = ctx['value']
    tree.child = {type: 2, tag: \\"div\\", children: [], attrs: {foo:_1}, key: 1};
}"
`;

exports[`attributes dynamic attribute with a dash 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    let _1 = ctx['id']
    tree.child = {type: 2, tag: \\"div\\", children: [], attrs: {\\"data-action-id\\":_1}, key: 1};
}"
`;

exports[`attributes dynamic attributes 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    let _1 = 'bar'
    tree.child = {type: 2, tag: \\"div\\", children: [], attrs: {foo:_1}, key: 1};
}"
`;

exports[`attributes dynamic class attribute 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 2, tag: \\"div\\", children: [], key: 1, class: this.toClassObj(ctx['c'])};
}"
`;

exports[`attributes dynamic empty class attribute 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 2, tag: \\"div\\", children: [], key: 1, class: this.toClassObj(ctx['c'])};
}"
`;

exports[`attributes fixed variable 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    let _1 = ctx['value']
    tree.child = {type: 2, tag: \\"div\\", children: [], attrs: {foo:_1}, key: 1};
}"
`;

exports[`attributes from object variables set previously 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.o = {a:'b'};
    vn1.children.push({type: 2, tag: \\"span\\", children: [], key: 1, class: this.toClassObj(ctx['o'].a)});
}"
`;

exports[`attributes from variables set previously 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.abc = 'def';
    vn1.children.push({type: 2, tag: \\"span\\", children: [], key: 1, class: this.toClassObj(ctx['abc'])});
}"
`;

exports[`attributes static attributes 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`attributes static attributes on void elements 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`attributes static attributes with dashes 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`attributes t-att-class and class should combine together 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 2, tag: \\"div\\", children: [], attrs: {class:\\"hello\\"}, key: 1, class: this.toClassObj(ctx['value'])};
}"
`;

exports[`foreach does not pollute the rendering context 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = [1];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.item_first = i === 0;
        ctx.item_last = i === length2 - 1;
        ctx.item = _3[i];
        ctx.item_index = i;
        ctx.item_value = _3[i];
        vn1.children.push({type: 3, text: ctx['item'], el: null});
    }
    ctx = ctx.__proto__;
}"
`;

exports[`foreach iterate on items (on a element node) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = [1,2];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.item_first = i === 0;
        ctx.item_last = i === length2 - 1;
        ctx.item = _3[i];
        ctx.item_index = i;
        ctx.item_value = _3[i];
        const vn4 = {type: 2, tag: \\"span\\", children: [], key: ctx['item']};
        vn1.children.push(vn4);
        vn4.children.push({type: 3, text: ctx['item'], el: null});
    }
    ctx = ctx.__proto__;
}"
`;

exports[`foreach iterate on items 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = [3,2,1];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.item_first = i === 0;
        ctx.item_last = i === length2 - 1;
        ctx.item = _3[i];
        ctx.item_index = i;
        ctx.item_value = _3[i];
        vn1.children.push({type: 3, text: \` [\`, el: null});
        vn1.children.push({type: 3, text: ctx['item_index'], el: null});
        vn1.children.push({type: 3, text: \`: \`, el: null});
        vn1.children.push({type: 3, text: ctx['item'], el: null});
        vn1.children.push({type: 3, text: \` \`, el: null});
        vn1.children.push({type: 3, text: ctx['item_value'], el: null});
        vn1.children.push({type: 3, text: \`] \`, el: null});
    }
    ctx = ctx.__proto__;
}"
`;

exports[`foreach iterate, position 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = Array(5);
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.elem_first = i === 0;
        ctx.elem_last = i === length2 - 1;
        ctx.elem = _3[i];
        ctx.elem_index = i;
        ctx.elem_value = _3[i];
        vn1.children.push({type: 3, text: \` -\`, el: null});
        if (ctx['elem_first']) {
            vn1.children.push({type: 3, text: \`first \`, el: null});
        }
        if (ctx['elem_last']) {
            vn1.children.push({type: 3, text: \` last\`, el: null});
        }
        vn1.children.push({type: 3, text: \`(\`, el: null});
        vn1.children.push({type: 3, text: ctx['elem_index'], el: null});
        vn1.children.push({type: 3, text: \`) \`, el: null});
    }
    ctx = ctx.__proto__;
}"
`;

exports[`foreach t-foreach in t-forach 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = ctx['numbers'];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.number_first = i === 0;
        ctx.number_last = i === length2 - 1;
        ctx.number = _3[i];
        ctx.number_index = i;
        ctx.number_value = _3[i];
        let _5 = ctx['letters'];
        let length4 = _5.length;
        ctx = Object.create(ctx);
        for (let i = 0; i < length4; i++) {
            ctx.letter_first = i === 0;
            ctx.letter_last = i === length4 - 1;
            ctx.letter = _5[i];
            ctx.letter_index = i;
            ctx.letter_value = _5[i];
            vn1.children.push({type: 3, text: \` [\`, el: null});
            vn1.children.push({type: 3, text: ctx['number'], el: null});
            vn1.children.push({type: 3, text: ctx['letter'], el: null});
            vn1.children.push({type: 3, text: \`] \`, el: null});
        }
        ctx = ctx.__proto__;
    }
    ctx = ctx.__proto__;
}"
`;

exports[`misc global 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__4\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = [4,5,6];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.value_first = i === 0;
        ctx.value_last = i === length2 - 1;
        ctx.value = _3[i];
        ctx.value_index = i;
        ctx.value_value = _3[i];
        const vn4 = {type: 2, tag: \\"span\\", children: [], key: 1};
        vn1.children.push(vn4);
        vn4.children.push({type: 3, text: ctx['value'], el: null});
        ctx = Object.create(ctx);
        const vn6 = {type: 1, children: [], staticNodes: tree.staticNodes};
        ctx = Object.create(ctx);
        const vn7 = {type: 1, children: [], staticNodes: tree.staticNodes};
        ctx.foo = 'aaa';
        ctx[this.zero] = vn7;
        vn6.children.push(this.callTemplate(tree, \\"__template__2\\", ctx));
        ctx = ctx.__proto__;
        vn6.children.push(this.callTemplate(tree, \\"__template__2\\", ctx));
        ctx.foo = 'bbb';
        vn6.children.push(this.callTemplate(tree, \\"__template__2\\", ctx));
        ctx[this.zero] = vn6;
        vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
        ctx = ctx.__proto__;
    }
    ctx = ctx.__proto__;
    vn1.children.push(this.callTemplate(tree, \\"__template__3\\", ctx));
}"
`;

exports[`misc mix of t-foreach and t-set/t-value 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = [1,2,3];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.a_first = i === 0;
        ctx.a_last = i === length2 - 1;
        ctx.a = _3[i];
        ctx.a_index = i;
        ctx.a_value = _3[i];
        let _5 = [4,5,6];
        let length4 = _5.length;
        ctx = Object.create(ctx);
        for (let i = 0; i < length4; i++) {
            ctx.b_first = i === 0;
            ctx.b_last = i === length4 - 1;
            ctx.b = _5[i];
            ctx.b_index = i;
            ctx.b_value = _5[i];
            ctx = Object.create(ctx);
            const vn6 = {type: 1, children: [], staticNodes: tree.staticNodes};
            ctx.c = 'x ';
            ctx[this.zero] = vn6;
            vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
            ctx = ctx.__proto__;
        }
        ctx = ctx.__proto__;
    }
    ctx = ctx.__proto__;
}"
`;

exports[`misc mix of t-foreach and t-set/t-value, 2 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = [1,2,3];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.a_first = i === 0;
        ctx.a_last = i === length2 - 1;
        ctx.a = _3[i];
        ctx.a_index = i;
        ctx.a_value = _3[i];
        let _5 = [4,5,6];
        let length4 = _5.length;
        ctx = Object.create(ctx);
        for (let i = 0; i < length4; i++) {
            ctx.b_first = i === 0;
            ctx.b_last = i === length4 - 1;
            ctx.b = _5[i];
            ctx.b_index = i;
            ctx.b_value = _5[i];
            ctx.c = 'x ';
            vn1.children.push({type: 3, text: ctx['a'], el: null});
            vn1.children.push({type: 3, text: ctx['b'], el: null});
            vn1.children.push({type: 3, text: ctx['c'], el: null});
        }
        ctx = ctx.__proto__;
    }
    ctx = ctx.__proto__;
}"
`;

exports[`static templates div with a class attribute 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates div with a class attribute with a quote 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates div with a empty class attribute 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates div with a span child node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates div with a text node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates div with an arbitrary attribute with a quote 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates empty div 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates no template (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 1, children:[]};
}"
`;

exports[`static templates properly handle comments 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 5, id: 0};
}"
`;

exports[`static templates properly handle comments between t-if/t-else 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (true) {
        vn1.children.push({type: 5, id: 0});
    } else {
        const vn3 = {type: 2, tag: \\"span\\", children: [], key: 1};
        vn1.children.push(vn3);
        vn3.children.push({type: 3, text: \`owl\`, el: null});
    }
}"
`;

exports[`static templates simple dynamic value 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 3, text: ctx['text'], el: null};
}"
`;

exports[`static templates simple string (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 3, text: \`hello vdom\`, el: null};
}"
`;

exports[`static templates simple string 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 3, text: \`hello vdom\`, el: null};
}"
`;

exports[`static templates simple string, with some dynamic value 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 1, children:[]};
    vn1.children.push({type: 3, text: \`hello \`, el: null});
    vn1.children.push({type: 3, text: ctx['text'], el: null});
}"
`;

exports[`static templates two empty divs (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 1, children:[]};
    vn1.children.push({type: 5, id: 0});
    vn1.children.push({type: 5, id: 1});
}"
`;

exports[`t-call (template calling basic caller 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
}"
`;

exports[`t-call (template calling basic caller, no parent node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    tree.child = this.callTemplate(tree, \\"__template__1\\", ctx);
}"
`;

exports[`t-call (template calling call with several sub nodes on same line 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    vn2.children.push({type: 5, id: 0});
    vn2.children.push({type: 3, text: \` \`, el: null});
    vn2.children.push({type: 5, id: 1});
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling cascading t-call t-raw='0' 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__4\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    vn2.children.push({type: 5, id: 0});
    vn2.children.push({type: 3, text: \` \`, el: null});
    vn2.children.push({type: 5, id: 1});
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"__template__3\\", ctx));
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling inherit context 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.foo = 1;
    vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
}"
`;

exports[`t-call (template calling recursive template, part 1 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`recursive\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    const vn2 = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 3, text: \`hey\`, el: null});
    if (false) {
        vn1.children.push(this.callTemplate(tree, \\"recursive\\", ctx));
    }
}"
`;

exports[`t-call (template calling recursive template, part 2 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`Parent\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    ctx.node = ctx['root'];
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"nodeTemplate\\", ctx));
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling recursive template, part 3 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`Parent\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    ctx.node = ctx['root'];
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"nodeTemplate\\", ctx));
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling recursive template, part 4: with t-set recursive index 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`Parent\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    ctx.recursive_idx = 1;
    ctx.node = ctx['root'];
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"nodeTemplate\\", ctx));
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling scoped parameters 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    ctx.foo = 42;
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
    ctx = ctx.__proto__;
    vn1.children.push({type: 3, text: ctx['foo'], el: null});
}"
`;

exports[`t-call (template calling t-call with t-if 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['flag']) {
        vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
    }
}"
`;

exports[`t-call (template calling t-call with t-set inside and outside 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _3 = ctx['list'];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.v_first = i === 0;
        ctx.v_last = i === length2 - 1;
        ctx.v = _3[i];
        ctx.v_index = i;
        ctx.v_value = _3[i];
        ctx.val = ctx['v'].val;
        ctx = Object.create(ctx);
        const vn4 = {type: 1, children: [], staticNodes: tree.staticNodes};
        ctx.val3 = ctx['val']*3;
        ctx[this.zero] = vn4;
        vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
        ctx = ctx.__proto__;
    }
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling t-call with t-set inside and outside. 2 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__3\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"p\\", children: [], key: 1};
    ctx.w = 'fromwrapper';
    vn1.children.push(this.callTemplate(tree, \\"__template__2\\", ctx));
}"
`;

exports[`t-call (template calling t-call, conditional and t-set in t-call body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__3\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.v1 = 'elif';
    if (ctx['v1']==='if') {
        vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
    } else if (ctx['v1']==='elif') {
        ctx = Object.create(ctx);
        const vn3 = {type: 1, children: [], staticNodes: tree.staticNodes};
        ctx.v = 'success';
        ctx[this.zero] = vn3;
        vn1.children.push(this.callTemplate(tree, \\"__template__2\\", ctx));
        ctx = ctx.__proto__;
    }
}"
`;

exports[`t-call (template calling with unused body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    const vn1 = {type: 1, children: [], staticNodes: tree.staticNodes};
    vn1.children.push({type: 3, text: \`WHEEE\`, el: null});
    ctx[this.zero] = vn1;
    tree.child = this.callTemplate(tree, \\"__template__1\\", ctx);
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling with unused setbody 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    ctx = Object.create(ctx);
    const vn1 = {type: 1, children: [], staticNodes: tree.staticNodes};
    ctx.qux = 3;
    ctx[this.zero] = vn1;
    tree.child = this.callTemplate(tree, \\"__template__1\\", ctx);
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling with used body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    const vn1 = {type: 1, children: [], staticNodes: tree.staticNodes};
    vn1.children.push({type: 3, text: \`ok\`, el: null});
    ctx[this.zero] = vn1;
    tree.child = this.callTemplate(tree, \\"__template__1\\", ctx);
    ctx = ctx.__proto__;
}"
`;

exports[`t-call (template calling with used set body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    ctx.foo = 'ok';
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
    ctx = ctx.__proto__;
}"
`;

exports[`t-esc div with falsy values 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    const vn2 = {type: 2, tag: \\"p\\", children: [], key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 3, text: ctx['v1'], el: null});
    const vn4 = {type: 2, tag: \\"p\\", children: [], key: 1};
    vn1.children.push(vn4);
    vn4.children.push({type: 3, text: ctx['v2'], el: null});
    const vn6 = {type: 2, tag: \\"p\\", children: [], key: 1};
    vn1.children.push(vn6);
    vn6.children.push({type: 3, text: ctx['v3'], el: null});
    const vn8 = {type: 2, tag: \\"p\\", children: [], key: 1};
    vn1.children.push(vn8);
    vn8.children.push({type: 3, text: ctx['v4'], el: null});
    const vn10 = {type: 2, tag: \\"p\\", children: [], key: 1};
    vn1.children.push(vn10);
    vn10.children.push({type: 3, text: ctx['v5'], el: null});
}"
`;

exports[`t-esc escaping 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push({type: 3, text: ctx['var'], el: null});
}"
`;

exports[`t-esc escaping on a node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push({type: 3, text: 'ok', el: null});
}"
`;

exports[`t-esc escaping on a node with a body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    let _2 = 'ok'
    if (_2 !== undefined) {
        vn1.children.push({type: 3, text: _2, el: null});
    } else {
        vn1.children.push({type: 3, text: \`nope\`, el: null});
    }
}"
`;

exports[`t-esc escaping on a node with a body, as a default 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    let _2 = ctx['var']
    if (_2 !== undefined) {
        vn1.children.push({type: 3, text: _2, el: null});
    } else {
        vn1.children.push({type: 3, text: \`nope\`, el: null});
    }
}"
`;

exports[`t-esc literal 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push({type: 3, text: 'ok', el: null});
}"
`;

exports[`t-esc t-esc is escaped 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _2 = new this.VDomArray();
    const vn3 = {type: 2, tag: \\"p\\", children: [], key: 1};
    _2.push(vn3);
    vn3.children.push({type: 3, text: \`escaped\`, el: null});
    ctx.var = _2;
    let _5 = this.vDomToString(ctx.var);
    vn1.children.push({type: 3, text: _5, el: null});
}"
`;

exports[`t-esc t-esc work with spread operator 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push({type: 3, text: [...ctx['state'].list], el: null});
}"
`;

exports[`t-esc t-esc=0 is escaped 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__2\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx = Object.create(ctx);
    const vn2 = {type: 1, children: [], staticNodes: tree.staticNodes};
    vn2.children.push({type: 5, id: 0});
    ctx[this.zero] = vn2;
    vn1.children.push(this.callTemplate(tree, \\"__template__1\\", ctx));
    ctx = ctx.__proto__;
}"
`;

exports[`t-esc variable 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push({type: 3, text: ctx['var'], el: null});
}"
`;

exports[`t-if boolean value condition elif 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['color']=='black') {
        vn1.children.push({type: 3, text: \`black pearl\`, el: null});
    } else if (ctx['color']=='yellow') {
        vn1.children.push({type: 3, text: \`yellow submarine\`, el: null});
    } else if (ctx['color']=='red') {
        vn1.children.push({type: 3, text: \`red is dead\`, el: null});
    } else {
        vn1.children.push({type: 3, text: \`beer\`, el: null});
    }
}"
`;

exports[`t-if boolean value condition else 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    const vn2 = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 3, text: \`begin\`, el: null});
    if (ctx['condition']) {
        vn1.children.push({type: 3, text: \`ok\`, el: null});
    } else {
        vn1.children.push({type: 3, text: \`ok-else\`, el: null});
    }
    vn1.children.push({type: 5, id: 0});
}"
`;

exports[`t-if boolean value condition false else 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    const vn2 = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 3, text: \`begin\`, el: null});
    if (ctx['condition']) {
        vn1.children.push({type: 3, text: \`fail\`, el: null});
    } else {
        vn1.children.push({type: 3, text: \`fail-else\`, el: null});
    }
    vn1.children.push({type: 5, id: 0});
}"
`;

exports[`t-if boolean value condition missing 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 3, text: \`fail\`, el: null});
    }
}"
`;

exports[`t-if boolean value false condition (on a dom node) (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 5, id: 0});
    }
}"
`;

exports[`t-if boolean value false condition 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 3, text: \`ok\`, el: null});
    }
}"
`;

exports[`t-if boolean value false condition, resulting in empty template (on a dom node) (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    if (ctx['condition']) {
        tree.child = {type: 5, id: 0};
    }
}"
`;

exports[`t-if boolean value true condition (on a dom node) (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 5, id: 0});
    }
}"
`;

exports[`t-if boolean value true condition 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 3, text: \`ok\`, el: null});
    }
}"
`;

exports[`t-if can use some boolean operators in expressions 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['cond1']&&ctx['cond2']) {
        vn1.children.push({type: 3, text: \`and\`, el: null});
    }
    if (ctx['cond1']&&ctx['cond3']) {
        vn1.children.push({type: 3, text: \`nope\`, el: null});
    }
    if (ctx['cond1']||ctx['cond3']) {
        vn1.children.push({type: 3, text: \`or\`, el: null});
    }
    if (ctx['cond3']||ctx['cond4']) {
        vn1.children.push({type: 3, text: \`nope\`, el: null});
    }
    if (ctx['m']>3) {
        vn1.children.push({type: 3, text: \`mgt\`, el: null});
    }
    if (ctx['n']>3) {
        vn1.children.push({type: 3, text: \`ngt\`, el: null});
    }
    if (ctx['m']<3) {
        vn1.children.push({type: 3, text: \`mlt\`, el: null});
    }
    if (ctx['n']<3) {
        vn1.children.push({type: 3, text: \`nlt\`, el: null});
    }
}"
`;

exports[`t-if t-esc with t-elif 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (false) {
        vn1.children.push({type: 3, text: \`abc\`, el: null});
    } else {
        vn1.children.push({type: 3, text: 'x', el: null});
    }
}"
`;

exports[`t-if t-esc with t-if 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (true) {
        vn1.children.push({type: 3, text: 'x', el: null});
    }
}"
`;

exports[`t-if t-set, then t-elif, part 3 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.y = false;
    ctx.x = ctx['y'];
    if (ctx['x']) {
        vn1.children.push({type: 5, id: 0});
    } else if (!ctx['x']) {
        vn1.children.push({type: 5, id: 1});
    }
}"
`;

exports[`t-if t-set, then t-if 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.title = 'test';
    if (ctx['title']) {
        vn1.children.push({type: 3, text: ctx['title'], el: null});
    }
}"
`;

exports[`t-if t-set, then t-if, part 2 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.y = true;
    ctx.x = ctx['y'];
    if (ctx['x']) {
        vn1.children.push({type: 5, id: 0});
    }
}"
`;

exports[`t-on can bind event handler 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const rootCtx = ctx;
    const vn1 = tree.child = {type: 2, tag: \\"button\\", children: [], key: 1, on: {click: {cb: ev => this.handleEvent(ev, rootCtx, ctx['add'])}}};
    vn1.children.push({type: 3, text: \`Click\`, el: null});
}"
`;

exports[`t-on can bind two event handlers 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const rootCtx = ctx;
    const vn1 = tree.child = {type: 2, tag: \\"button\\", children: [], key: 1, on: {click: {cb: ev => this.handleEvent(ev, rootCtx, ctx['handleClick'])}, dblclick: {cb: ev => this.handleEvent(ev, rootCtx, ctx['handleDblClick'])}}};
    vn1.children.push({type: 3, text: \`Click\`, el: null});
}"
`;

exports[`t-on handler is bound to proper owner 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const rootCtx = ctx;
    const vn1 = tree.child = {type: 2, tag: \\"button\\", children: [], key: 1, on: {click: {cb: ev => this.handleEvent(ev, rootCtx, ctx['add'])}}};
    vn1.children.push({type: 3, text: \`Click\`, el: null});
}"
`;

exports[`t-raw empty value, and a body as default (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    let _2 = ctx['var']
    if (_2 !== undefined) {
        vn1.children.push(...this.htmlToVDOM(ctx['var']));
    } else {
        vn1.children.push({type: 3, text: \`body\`, el: null});
    }
}"
`;

exports[`t-raw from a (template, body) variable (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    let _2 = new this.VDomArray();
    const vn3 = {type: 2, tag: \\"abc\\", children: [], key: 1};
    _2.push(vn3);
    vn3.children.push({type: 3, text: \`def\`, el: null});
    ctx.v = _2;
    vn1.children.push({type: 1, children: ctx.v});
}"
`;

exports[`t-raw from a (template, value+body) variable (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    ctx.v = ctx['blip'];
    if (!ctx.v) {
        let _2 = new this.VDomArray();
        const vn3 = {type: 2, tag: \\"abc\\", children: [], key: 1};
        _2.push(vn3);
        vn3.children.push({type: 3, text: \`def\`, el: null});
        ctx.v = _2
    }
    let _5 = ctx.v instanceof this.VDomArray ? ctx.v : this.htmlToVDOM(ctx.v);
    vn1.children.push({type: 1, children: _5});
}"
`;

exports[`t-raw literal 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push(...this.htmlToVDOM('ok'));
}"
`;

exports[`t-raw not escaping 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    vn1.children.push(...this.htmlToVDOM(ctx['var']));
}"
`;

exports[`t-raw only a t-raw directive, no parent! (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    tree.child = {type: 1, children: this.htmlToVDOM(ctx['var'])};
}"
`;

exports[`t-raw t-raw and another sibling node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    const vn2 = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 3, text: \`hello\`, el: null});
    vn1.children.push(...this.htmlToVDOM(ctx['var']));
}"
`;

exports[`t-raw variable 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    const vn1 = tree.child = {type: 2, tag: \\"span\\", children: [], key: 1};
    vn1.children.push(...this.htmlToVDOM(ctx['var']));
}"
`;

exports[`t-set evaluate value expression 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.value = 1+2;
    vn1.children.push({type: 3, text: ctx['value'], el: null});
}"
`;

exports[`t-set evaluate value expression, part 2 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.value = ctx['somevariable']+2;
    vn1.children.push({type: 3, text: ctx['value'], el: null});
}"
`;

exports[`t-set set from attribute literal 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.value = 'ok';
    vn1.children.push({type: 3, text: ctx['value'], el: null});
}"
`;

exports[`t-set set from attribute lookup 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.stuff = ctx['value'];
    vn1.children.push({type: 3, text: ctx['stuff'], el: null});
}"
`;

exports[`t-set set from body literal 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 1, children:[]};
    let _2 = new this.VDomArray();
    _2.push({type: 3, text: \`ok\`, el: null});
    ctx.value = _2;
    let _4 = this.vDomToString(ctx.value);
    vn1.children.push({type: 3, text: _4, el: null});
}"
`;

exports[`t-set set from body lookup 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _2 = new this.VDomArray();
    _2.push({type: 3, text: ctx['value'], el: null});
    ctx.stuff = _2;
    let _4 = this.vDomToString(ctx.stuff);
    vn1.children.push({type: 3, text: _4, el: null});
}"
`;

exports[`t-set set from empty body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
}"
`;

exports[`t-set t-set and t-if 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.v = ctx['value'];
    if (ctx['v']==='ok') {
        vn1.children.push({type: 3, text: \`grimbergen\`, el: null});
    }
}"
`;

exports[`t-set t-set body is evaluated immediately 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.v1 = 'before';
    let _2 = new this.VDomArray();
    const vn3 = {type: 2, tag: \\"span\\", children: [], key: 1};
    _2.push(vn3);
    vn3.children.push({type: 3, text: ctx['v1'], el: null});
    ctx.v2 = _2;
    ctx.v1 = 'after';
    vn1.children.push({type: 1, children: ctx.v2});
}"
`;

exports[`t-set t-set does not modify main context 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.value = 'ok';
    vn1.children.push({type: 3, text: ctx['value'], el: null});
}"
`;

exports[`t-set t-set evaluates an expression only once 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.v = ctx['value']+' artois';
    vn1.children.push({type: 3, text: ctx['v'], el: null});
    vn1.children.push({type: 3, text: ctx['v'], el: null});
}"
`;

exports[`t-set t-set should reuse variable if possible 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.v = 1;
    let _3 = ctx['list'];
    let length2 = _3.length;
    ctx = Object.create(ctx);
    for (let i = 0; i < length2; i++) {
        ctx.elem_first = i === 0;
        ctx.elem_last = i === length2 - 1;
        ctx.elem = _3[i];
        ctx.elem_index = i;
        ctx.elem_value = _3[i];
        const vn4 = {type: 2, tag: \\"div\\", children: [], key: ctx['elem_index']};
        vn1.children.push(vn4);
        const vn5 = {type: 2, tag: \\"span\\", children: [], key: 1};
        vn4.children.push(vn5);
        vn5.children.push({type: 3, text: \`v\`, el: null});
        vn5.children.push({type: 3, text: ctx['v'], el: null});
        ctx.v = ctx['elem'];
    }
    ctx = ctx.__proto__;
}"
`;

exports[`t-set t-set with content and sub t-esc 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    let _2 = new this.VDomArray();
    _2.push({type: 3, text: ctx['beep'], el: null});
    _2.push({type: 3, text: \` boop\`, el: null});
    ctx.setvar = _2;
    let _5 = this.vDomToString(ctx.setvar);
    vn1.children.push({type: 3, text: _5, el: null});
}"
`;

exports[`t-set t-set with t-value (falsy) and body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.v3 = false;
    ctx.v1 = 'before';
    ctx.v2 = ctx['v3'];
    if (!ctx.v2) {
        let _2 = new this.VDomArray();
        const vn3 = {type: 2, tag: \\"span\\", children: [], key: 1};
        _2.push(vn3);
        vn3.children.push({type: 3, text: ctx['v1'], el: null});
        ctx.v2 = _2
    }
    ctx.v1 = 'after';
    ctx.v3 = true;
    let _6 = ctx.v2 instanceof this.VDomArray ? ctx.v2 : this.htmlToVDOM(ctx.v2);
    vn1.children.push({type: 1, children: _6});
}"
`;

exports[`t-set t-set with t-value (truthy) and body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.v3 = 'Truthy';
    ctx.v1 = 'before';
    ctx.v2 = ctx['v3'];
    if (!ctx.v2) {
        let _2 = new this.VDomArray();
        const vn3 = {type: 2, tag: \\"span\\", children: [], key: 1};
        _2.push(vn3);
        vn3.children.push({type: 3, text: ctx['v1'], el: null});
        ctx.v2 = _2
    }
    ctx.v1 = 'after';
    ctx.v3 = false;
    let _6 = ctx.v2 instanceof this.VDomArray ? ctx.v2 : this.htmlToVDOM(ctx.v2);
    vn1.children.push({type: 1, children: _6});
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 1 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['flag']) {
        let _2 = new this.VDomArray();
        _2.push({type: 3, text: \`1\`, el: null});
        ctx.ourvar = _2;
    } else {
        ctx.ourvar = 0;
    }
    let _4 = ctx.ourvar instanceof this.VDomArray ? this.vDomToString(ctx.ourvar) : ctx.ourvar;
    vn1.children.push({type: 3, text: _4, el: null});
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 1 2`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['flag']) {
        let _2 = new this.VDomArray();
        _2.push({type: 3, text: \`1\`, el: null});
        ctx.ourvar = _2;
    } else {
        ctx.ourvar = 0;
    }
    let _4 = ctx.ourvar instanceof this.VDomArray ? this.vDomToString(ctx.ourvar) : ctx.ourvar;
    vn1.children.push({type: 3, text: _4, el: null});
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 2 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['flag']) {
        ctx.ourvar = 1;
    } else {
        let _2 = new this.VDomArray();
        _2.push({type: 3, text: \`0\`, el: null});
        ctx.ourvar = _2;
    }
    let _4 = ctx.ourvar instanceof this.VDomArray ? this.vDomToString(ctx.ourvar) : ctx.ourvar;
    vn1.children.push({type: 3, text: _4, el: null});
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 2 2`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    if (ctx['flag']) {
        ctx.ourvar = 1;
    } else {
        let _2 = new this.VDomArray();
        _2.push({type: 3, text: \`0\`, el: null});
        ctx.ourvar = _2;
    }
    let _4 = ctx.ourvar instanceof this.VDomArray ? this.vDomToString(ctx.ourvar) : ctx.ourvar;
    vn1.children.push({type: 3, text: _4, el: null});
}"
`;

exports[`t-set value priority 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`__template__1\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 2, tag: \\"div\\", children: [], key: 1};
    ctx.value = 1;
    if (!ctx.value) {
        let _2 = new this.VDomArray();
        _2.push({type: 3, text: \`2\`, el: null});
        ctx.value = _2
    }
    let _4 = ctx.value instanceof this.VDomArray ? this.vDomToString(ctx.value) : ctx.value;
    vn1.children.push({type: 3, text: _4, el: null});
}"
`;
