// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`static templates div with a class attribute 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div class=\\"abc\\">word</div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {\\"class\\":\\"abc\\"}, key: 1};
    vn1.children.push({type: 1, text: \`word\`, el: null});
}"
`;

exports[`static templates div with a class attribute with a quote 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div class=\\"a'bc\\">word</div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {\\"class\\":\\"a'bc\\"}, key: 1};
    vn1.children.push({type: 1, text: \`word\`, el: null});
}"
`;

exports[`static templates div with a empty class attribute 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div class=\\"\\">word</div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: \`word\`, el: null});
}"
`;

exports[`static templates div with a span child node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><span>word</span></div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    const vn2 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 1, text: \`word\`, el: null});
}"
`;

exports[`static templates div with a text node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>word</div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: \`word\`, el: null});
}"
`;

exports[`static templates div with an arbitrary attribute with a quote 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div abc=\\"a'bc\\">word</div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {\\"abc\\":\\"a'bc\\"}, key: 1};
    vn1.children.push({type: 1, text: \`word\`, el: null});
}"
`;

exports[`static templates empty div 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div></div>\`
    tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
}"
`;

exports[`static templates no template (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`\`
    tree.child = {type: 4, children:[]};
}"
`;

exports[`static templates properly handle comments 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>hello <!-- comment-->owl</div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: \`hello \`, el: null});
    vn1.children.push({type: 2, text: \` comment\`, el: null});
    vn1.children.push({type: 1, text: \`owl\`, el: null});
}"
`;

exports[`static templates properly handle comments between t-if/t-else 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>        <span t-if=\\"true\\">true</span>        <!-- comment-->        <span t-else=\\"\\">owl</spa\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (true) {
        const vn2 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
        vn1.children.push(vn2);
        vn2.children.push({type: 1, text: \`true\`, el: null});
    } else {
        const vn4 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
        vn1.children.push(vn4);
        vn4.children.push({type: 1, text: \`owl\`, el: null});
    }
}"
`;

exports[`static templates simple dynamic value 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<t><t t-esc=\\"text\\"/></t>\`
    tree.child = {type: 1, text: ctx['text'], el: null};
}"
`;

exports[`static templates simple string (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`hello vdom\`
    tree.child = {type: 1, text: \`hello vdom\`, el: null};
}"
`;

exports[`static templates simple string 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<t>hello vdom</t>\`
    tree.child = {type: 1, text: \`hello vdom\`, el: null};
}"
`;

exports[`static templates simple string, with some dynamic value 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<t>hello <t t-esc=\\"text\\"/></t>\`
    const vn1 = tree.child = {type: 4, children:[]};
    vn1.children.push({type: 1, text: \`hello \`, el: null});
    vn1.children.push({type: 1, text: ctx['text'], el: null});
}"
`;

exports[`static templates two empty divs (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div></div><div></div>\`
    const vn1 = tree.child = {type: 4, children:[]};
    vn1.children.push({type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1});
    vn1.children.push({type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1});
}"
`;

exports[`t-esc div with falsy values 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>          <p t-esc=\\"v1\\"/>          <p t-esc=\\"v2\\"/>          <p t-esc=\\"v3\\"/>          <p t-e\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    const vn2 = {type: 0, tag: \\"p\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 1, text: ctx['v1'], el: null});
    const vn4 = {type: 0, tag: \\"p\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn4);
    vn4.children.push({type: 1, text: ctx['v2'], el: null});
    const vn6 = {type: 0, tag: \\"p\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn6);
    vn6.children.push({type: 1, text: ctx['v3'], el: null});
    const vn8 = {type: 0, tag: \\"p\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn8);
    vn8.children.push({type: 1, text: ctx['v4'], el: null});
    const vn10 = {type: 0, tag: \\"p\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn10);
    vn10.children.push({type: 1, text: ctx['v5'], el: null});
}"
`;

exports[`t-esc escaping 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span><t t-esc=\\"var\\"/></span>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: ctx['var'], el: null});
}"
`;

exports[`t-esc escaping on a node 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span t-esc=\\"'ok'\\"/>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: 'ok', el: null});
}"
`;

exports[`t-esc escaping on a node with a body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span t-esc=\\"'ok'\\">nope</span>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    let _2 = 'ok'
    if (_2 !== undefined) {
        vn1.children.push({type: 1, text: _2, el: null});
    } else {
        vn1.children.push({type: 1, text: \`nope\`, el: null});
    }
}"
`;

exports[`t-esc escaping on a node with a body, as a default 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span t-esc=\\"var\\">nope</span>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    let _2 = ctx['var']
    if (_2 !== undefined) {
        vn1.children.push({type: 1, text: _2, el: null});
    } else {
        vn1.children.push({type: 1, text: \`nope\`, el: null});
    }
}"
`;

exports[`t-esc literal 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span><t t-esc=\\"'ok'\\"/></span>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: 'ok', el: null});
}"
`;

exports[`t-esc t-esc work with spread operator 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span><t t-esc=\\"[...state.list]\\"/></span>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: [...ctx['state'].list], el: null});
}"
`;

exports[`t-esc variable 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span><t t-esc=\\"var\\"/></span>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push({type: 1, text: ctx['var'], el: null});
}"
`;

exports[`t-if boolean value condition elif 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>        <t t-if=\\"color == 'black'\\">black pearl</t>        <t t-elif=\\"color == 'yellow'\\">yello\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['color']=='black') {
        vn1.children.push({type: 1, text: \`black pearl\`, el: null});
    } else if (ctx['color']=='yellow') {
        vn1.children.push({type: 1, text: \`yellow submarine\`, el: null});
    } else if (ctx['color']=='red') {
        vn1.children.push({type: 1, text: \`red is dead\`, el: null});
    } else {
        vn1.children.push({type: 1, text: \`beer\`, el: null});
    }
}"
`;

exports[`t-if boolean value condition else 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>        <span>begin</span>        <t t-if=\\"condition\\">ok</t>        <t t-else=\\"\\">ok-else</t>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    const vn2 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 1, text: \`begin\`, el: null});
    if (ctx['condition']) {
        vn1.children.push({type: 1, text: \`ok\`, el: null});
    } else {
        vn1.children.push({type: 1, text: \`ok-else\`, el: null});
    }
    const vn6 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn6);
    vn6.children.push({type: 1, text: \`end\`, el: null});
}"
`;

exports[`t-if boolean value condition false else 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><span>begin</span><t t-if=\\"condition\\">fail</t>          <t t-else=\\"\\">fail-else</t><span>end</s\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    const vn2 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn2);
    vn2.children.push({type: 1, text: \`begin\`, el: null});
    if (ctx['condition']) {
        vn1.children.push({type: 1, text: \`fail\`, el: null});
    } else {
        vn1.children.push({type: 1, text: \`fail-else\`, el: null});
    }
    const vn6 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    vn1.children.push(vn6);
    vn6.children.push({type: 1, text: \`end\`, el: null});
}"
`;

exports[`t-if boolean value condition missing 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<span><t t-if=\\"condition\\">fail</t></span>\`
    const vn1 = tree.child = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 1, text: \`fail\`, el: null});
    }
}"
`;

exports[`t-if boolean value false condition (on a dom node) (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><span t-if=\\"condition\\">ok</span></div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['condition']) {
        const vn2 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
        vn1.children.push(vn2);
        vn2.children.push({type: 1, text: \`ok\`, el: null});
    }
}"
`;

exports[`t-if boolean value false condition 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-if=\\"condition\\">ok</t></div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 1, text: \`ok\`, el: null});
    }
}"
`;

exports[`t-if boolean value false condition, resulting in empty template (on a dom node) (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div t-if=\\"condition\\">ok</div>\`
    if (ctx['condition']) {
        const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
        vn1.children.push({type: 1, text: \`ok\`, el: null});
    }
}"
`;

exports[`t-if boolean value true condition (on a dom node) (*) 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><span t-if=\\"condition\\">ok</span></div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['condition']) {
        const vn2 = {type: 0, tag: \\"span\\", el: null, children: [], attrs: {}, key: 1};
        vn1.children.push(vn2);
        vn2.children.push({type: 1, text: \`ok\`, el: null});
    }
}"
`;

exports[`t-if boolean value true condition 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-if=\\"condition\\">ok</t></div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['condition']) {
        vn1.children.push({type: 1, text: \`ok\`, el: null});
    }
}"
`;

exports[`t-if can use some boolean operators in expressions 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>        <t t-if=\\"cond1 and cond2\\">and</t>        <t t-if=\\"cond1 and cond3\\">nope</t>        <\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['cond1']&&ctx['cond2']) {
        vn1.children.push({type: 1, text: \`and\`, el: null});
    }
    if (ctx['cond1']&&ctx['cond3']) {
        vn1.children.push({type: 1, text: \`nope\`, el: null});
    }
    if (ctx['cond1']||ctx['cond3']) {
        vn1.children.push({type: 1, text: \`or\`, el: null});
    }
    if (ctx['cond3']||ctx['cond4']) {
        vn1.children.push({type: 1, text: \`nope\`, el: null});
    }
    if (ctx['m']>3) {
        vn1.children.push({type: 1, text: \`mgt\`, el: null});
    }
    if (ctx['n']>3) {
        vn1.children.push({type: 1, text: \`ngt\`, el: null});
    }
    if (ctx['m']<3) {
        vn1.children.push({type: 1, text: \`mlt\`, el: null});
    }
    if (ctx['n']<3) {
        vn1.children.push({type: 1, text: \`nlt\`, el: null});
    }
}"
`;

exports[`t-if t-esc with t-elif 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-if=\\"false\\">abc</t><t t-else=\\"\\" t-esc=\\"'x'\\"/></div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (false) {
        vn1.children.push({type: 1, text: \`abc\`, el: null});
    } else {
        vn1.children.push({type: 1, text: 'x', el: null});
    }
}"
`;

exports[`t-if t-esc with t-if 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-if=\\"true\\" t-esc=\\"'x'\\"/></div>\`
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (true) {
        vn1.children.push({type: 1, text: 'x', el: null});
    }
}"
`;

exports[`t-set evaluate value expression 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-set=\\"value\\" t-value=\\"1 + 2\\"/><t t-esc=\\"value\\"/></div>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    ctx.value = 1+2;
    vn1.children.push({type: 1, text: ctx['value'], el: null});
}"
`;

exports[`t-set evaluate value expression, part 2 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-set=\\"value\\" t-value=\\"somevariable + 2\\"/><t t-esc=\\"value\\"/></div>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    ctx.value = ctx['somevariable']+2;
    vn1.children.push({type: 1, text: ctx['value'], el: null});
}"
`;

exports[`t-set set from attribute literal 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-set=\\"value\\" t-value=\\"'ok'\\"/><t t-esc=\\"value\\"/></div>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    ctx.value = 'ok';
    vn1.children.push({type: 1, text: ctx['value'], el: null});
}"
`;

exports[`t-set set from attribute lookup 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-set=\\"stuff\\" t-value=\\"value\\"/><t t-esc=\\"stuff\\"/></div>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    ctx.stuff = ctx['value'];
    vn1.children.push({type: 1, text: ctx['stuff'], el: null});
}"
`;

exports[`t-set set from body literal 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<t><t t-set=\\"value\\">ok</t><t t-esc=\\"value\\"/></t>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 4, children:[]};
    let _2 = new this.VDomArray();
    _2.push({type: 1, text: \`ok\`, el: null});
    ctx.value = _2;
    let _4 = this.vDomToString(ctx.value);
    vn1.children.push({type: 1, text: _4, el: null});
}"
`;

exports[`t-set set from body lookup 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-set=\\"stuff\\"><t t-esc=\\"value\\"/></t><t t-esc=\\"stuff\\"/></div>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    let _2 = new this.VDomArray();
    _2.push({type: 1, text: ctx['value'], el: null});
    ctx.stuff = _2;
    let _4 = this.vDomToString(ctx.stuff);
    vn1.children.push({type: 1, text: _4, el: null});
}"
`;

exports[`t-set set from empty body 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-set=\\"stuff\\"/><t t-esc=\\"stuff\\"/></div>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
}"
`;

exports[`t-set t-set and t-if 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>          <t t-set=\\"v\\" t-value=\\"value\\"/>          <t t-if=\\"v === 'ok'\\">grimbergen</t>       \`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    ctx.v = ctx['value'];
    if (ctx['v']==='ok') {
        vn1.children.push({type: 1, text: \`grimbergen\`, el: null});
    }
}"
`;

exports[`t-set t-set evaluates an expression only once 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div >            <t t-set=\\"v\\" t-value=\\"value + ' artois'\\"/>            <t t-esc=\\"v\\"/>           \`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    ctx.v = ctx['value']+' artois';
    vn1.children.push({type: 1, text: ctx['v'], el: null});
    vn1.children.push({type: 1, text: ctx['v'], el: null});
}"
`;

exports[`t-set t-set with content and sub t-esc 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>          <t t-set=\\"setvar\\"><t t-esc=\\"beep\\"/> boop</t>          <t t-esc=\\"setvar\\"/>        <\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    let _2 = new this.VDomArray();
    _2.push({type: 1, text: ctx['beep'], el: null});
    _2.push({type: 1, text: \` boop\`, el: null});
    ctx.setvar = _2;
    let _5 = this.vDomToString(ctx.setvar);
    vn1.children.push({type: 1, text: _5, el: null});
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 1 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>          <t t-if=\\"flag\\" t-set=\\"ourvar\\">1</t>          <t t-else=\\"\\" t-set=\\"ourvar\\" t-value=\\"0\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['flag']) {
        let _2 = new this.VDomArray();
        _2.push({type: 1, text: \`1\`, el: null});
        ctx.ourvar = _2;
    } else {
        ctx.ourvar = 0;
    }
    let _4 = ctx.ourvar instanceof this.VDomArray ? this.vDomToString(ctx.ourvar) : ctx.ourvar;
    vn1.children.push({type: 1, text: _4, el: null});
}"
`;

exports[`t-set t-set, t-if, and mix of expression/body lookup, 1 2`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div>          <t t-if=\\"flag\\" t-set=\\"ourvar\\">1</t>          <t t-else=\\"\\" t-set=\\"ourvar\\" t-value=\\"0\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    if (ctx['flag']) {
        let _2 = new this.VDomArray();
        _2.push({type: 1, text: \`1\`, el: null});
        ctx.ourvar = _2;
    } else {
        ctx.ourvar = 0;
    }
    let _4 = ctx.ourvar instanceof this.VDomArray ? this.vDomToString(ctx.ourvar) : ctx.ourvar;
    vn1.children.push({type: 1, text: _4, el: null});
}"
`;

exports[`t-set value priority 1`] = `
"function anonymous(tree, ctx
) {
    // Template: \`<div><t t-set=\\"value\\" t-value=\\"1\\">2</t><t t-esc=\\"value\\"/></div>\`
    ctx = Object.create(ctx);
    const vn1 = tree.child = {type: 0, tag: \\"div\\", el: null, children: [], attrs: {}, key: 1};
    ctx.value = 1;
    if (!ctx.value) {
        let _2 = new this.VDomArray();
        _2.push({type: 1, text: \`2\`, el: null});
        ctx.value = _2
    }
    let _4 = ctx.value instanceof this.VDomArray ? this.vDomToString(ctx.value) : ctx.value;
    vn1.children.push({type: 1, text: _4, el: null});
}"
`;
